#!/usr/bin/env python3
import ctypes
import itertools
import os
import platform
import shlex
import signal
import subprocess
import sys
import traceback
from pwd import getpwnam

import bcc

PROJECT = "gdb-pounce"
REQUIRED_SYSTEM = "Linux"
REQUIRED_RELEASE = "5.3"
REQUIRED_BCC_VERSION = "0.11.0"
TEXT = r"""#include <linux/sched.h>
#include <uapi/linux/bpf.h>
#include <uapi/linux/ptrace.h>
#include <uapi/linux/signal.h>

struct key {
    u32 prefixlen;
    char data[TASK_COMM_LEN];
};

struct __attribute__((__packed__)) event {
    u32 pid;
};

BPF_LPM_TRIE(comms, struct key, u8);
BPF_PERF_OUTPUT(events);

int retprobe(struct pt_regs *ctx)
{
    struct key key;
    size_t comm_len;
    struct event event;

    if (PT_REGS_RC(ctx) != 0)
        return 0;

    if (bpf_get_current_comm(key.data, sizeof(key.data)) != 0)
        return 0;
    for (comm_len = 0; comm_len < TASK_COMM_LEN; comm_len++)
        if (key.data[comm_len] == 0)
            break;
    key.prefixlen = (comm_len + 1) * 8;
    if (comms.lookup(&key) == NULL)
        return 0;

    bpf_send_signal(SIGSTOP);

    event.pid = bpf_get_current_pid_tgid() >> 32;
    events.perf_submit(ctx, &event, sizeof(event));

    return 0;
}
"""

TASK_COMM_LEN = 16
COMM_T = ctypes.c_uint8 * TASK_COMM_LEN


class Key(ctypes.Structure):
    _fields_ = [("prefixlen", ctypes.c_uint32), ("data", COMM_T)]


def version_is_less(v1, v2):
    for w1, w2 in itertools.zip_longest(v1.split("."), v2.split("."), fillvalue="0"):
        try:
            w1, w2 = int(w1), int(w2)
        except ValueError:
            pass
        if w1 < w2:
            return True
        elif w1 > w2:
            return False
    return False


def check_system_requirements():
    actual_system = platform.system()
    if actual_system != REQUIRED_SYSTEM:
        print(
            f"{PROJECT} can only run on {REQUIRED_SYSTEM}, "
            f"but you have {actual_system}",
            file=sys.stderr,
        )
        sys.exit(1)

    actual_release = platform.release()
    if version_is_less(actual_release, REQUIRED_RELEASE):
        print(
            f"Please upgrade kernel: you have {actual_release}, "
            f"but {PROJECT} requires {REQUIRED_RELEASE}",
            file=sys.stderr,
        )
        sys.exit(1)

    actual_bcc_version = bcc.__version__
    if version_is_less(actual_bcc_version, REQUIRED_BCC_VERSION):
        print(
            f"Please upgrade bcc: you have {actual_bcc_version}, "
            f"but {PROJECT} requires {REQUIRED_BCC_VERSION}",
            file=sys.stderr,
        )
        sys.exit(1)


class SigintHandler:
    def __init__(self):
        self.raise_keyboard_interrupt = True
        signal.signal(signal.SIGINT, self)

    def __call__(self, signum, frame):
        if self.raise_keyboard_interrupt:
            raise KeyboardInterrupt()


def print_help(file):
    print(
        """usage: gdb-pounce [options] [gdb_arg [gdb_arg ...]] name [arg [arg ...]]

Attach gdb to a new process before it had a chance to run.

positional arguments:
  gdb_arg     gdb arguments
  name        basename of an executable to wait for
  arg         arguments to search in executable's cmdline

optional arguments:
  -h, --help  show this help message and exit
  --async     allow multiple gdbs in separate terminals
  --uid=UID   match only processes with the specified real user id""",
        file=file,
    )


def add_dashes(*names):
    result = set()
    for name in names:
        result.add(f"-{name}")
        result.add(f"--{name}")
    return result


# From gdb --help and man gdb.
GDB_FLAGS = add_dashes(
    "batch",
    "batch-silent",
    "configuration",
    "dbx",
    "f",
    "fullname",
    "n",
    "nh",
    "nw",
    "nx",
    "q",
    "quiet",
    "readnever",
    "readnow",
    "return-child-result",
    "silent",
    "tui",
    "w",
    "write",
)
GDB_OPTIONS = add_dashes(
    "D",
    "b",
    "c",
    "cd",
    "command",
    "core",
    "core",
    "d",
    "data-directory",
    "directory",
    "e",
    "eval-command",
    "ex",
    "exec",
    "iex",
    "init-command",
    "init-eval-command",
    "interpreter",
    "ix",
    "l",
    "pid",
    "s",
    "se",
    "symbols",
    "tty",
    "x",
)


def get_val(i):
    if i + 2 > len(sys.argv):
        print(
            f"""{sys.argv[0]}: option '{sys.argv[i]}' requires an argument
Use `{sys.argv[0]} --help' for a complete list of options.""",
            file=sys.stderr,
        )
        sys.exit(1)
    return sys.argv[i + 1]


def resolve_uid(s):
    try:
        return int(s)
    except ValueError:
        return getpwnam(s)[2]


def parse_argv():
    async_ = False
    uid = None
    gdb_args = []
    i = 1
    while i < len(sys.argv):
        arg = sys.argv[i]
        if arg in ("-h", "--help"):
            print_help(sys.stdout)
            sys.exit(0)
        elif arg == "--async":
            async_ = True
            i += 1
        elif arg.startswith("--uid="):
            uid = resolve_uid(arg[6:])
            i += 1
        elif arg == "--uid":
            uid = resolve_uid(get_val(i))
            i += 2
        elif arg in GDB_FLAGS or ("=" in arg and arg[: arg.index("=")] in GDB_OPTIONS):
            gdb_args.append(arg)
            i += 1
        elif arg in GDB_OPTIONS:
            gdb_args.append(arg)
            gdb_args.append(get_val(i))
            i += 2
        else:
            return async_, uid, gdb_args, arg, sys.argv[i + 1 :]
    print_help(sys.stderr)
    sys.exit(1)


def main():
    check_system_requirements()

    async_, uid, gdb_args, name, args = parse_argv()

    cmdline_needle = b"\0"
    for arg in args:
        cmdline_needle += arg.encode() + b"\0"

    try:
        bpf = bcc.BPF(text=TEXT)
    except Exception:
        print(file=sys.stderr)
        traceback.print_exc()
        if os.getuid() != 0:
            print(
                f"""
Are you root? Do you have CAP_SYS_ADMIN / CAP_BPF? Try this:
sudo env \"PATH=$PATH\" {shlex.join(sys.argv)}""",
                file=sys.stderr,
            )
        sys.exit(1)
    comms_map = bpf["comms"]
    comm_bytes = name[: TASK_COMM_LEN - 1].encode() + b"\0"
    key = Key(prefixlen=len(comm_bytes) * 8, data=COMM_T(*comm_bytes))
    comms_map[key] = ctypes.c_uint8(0)
    for syscall in ("execve", "execveat"):
        bpf.attach_kretprobe(event=bpf.get_syscall_fnname(syscall), fn_name="retprobe")
    pids = []

    def callback(cpu, data, size):
        # Do not put bpf["events"] into a variable, this will cause:
        # Exception ignored in: <function PerfEventArray.__del__ at 0x7f55b11c2f70>
        # Traceback (most recent call last):
        #   File "/usr/lib/python3.8/site-packages/bcc/table.py", line 584, in __del__
        #     del self[key]
        #   File "/usr/lib/python3.8/site-packages/bcc/table.py", line 590, in __delitem__
        #     super(PerfEventArray, self).__delitem__(key)
        #   File "/usr/lib/python3.8/site-packages/bcc/table.py", line 493, in __delitem__
        #     super(ArrayBase, self).__delitem__(key)
        #   File "/usr/lib/python3.8/site-packages/bcc/table.py", line 262, in __delitem__
        #     raise KeyError
        # Report this to https://github.com/iovisor/bcc?
        pids.append(bpf["events"].event(data).pid)

    bpf["events"].open_perf_buffer(callback)
    sigint_handler = SigintHandler()
    print("Running, press Ctrl+C to stop...", file=sys.stderr)
    while True:
        try:
            bpf.perf_buffer_poll()
        except KeyboardInterrupt:
            sys.exit()
        for pid in pids:
            try:
                exe = os.readlink(f"/proc/{pid}/exe")
                with open(f"/proc/{pid}/cmdline", "rb") as cmdline_fp:
                    cmdline = cmdline_fp.read()
                st = os.stat(f"/proc/{pid}")
            except FileNotFoundError:
                print(f"Skipping nonexistent pid {pid}...", file=sys.stderr)
                continue
            cmdline = cmdline[cmdline.index(b"\0") :]
            if (
                os.path.basename(exe) != name
                or cmdline_needle not in cmdline
                or (uid is not None and st.st_uid != uid)
            ):
                print(f"Skipping non-matching pid {pid}...", file=sys.stderr)
                os.kill(pid, signal.SIGCONT)
                continue
            gdb_argv = [
                "gdb",
                "-p",
                str(pid),
                # When attaching to a SIGSTOPped process, gdb receives an event
                # that indicates that the process got a SIGSTOP. It then passes
                # this signal to the process after each resumption, making
                # debugging impossible. Maybe this should be reported?
                "-ex",
                "handle SIGSTOP nostop noprint nopass",
            ] + gdb_args
            gdb_cmdline = " ".join(shlex.quote(gdb_arg) for gdb_arg in gdb_argv)
            print(f"Starting {gdb_cmdline}...", file=sys.stderr)
            if async_:
                subprocess.Popen(["x-terminal-emulator", "--"] + gdb_argv)
            else:
                sigint_handler.raise_keyboard_interrupt = False
                try:
                    subprocess.call(gdb_argv)
                finally:
                    sigint_handler.raise_keyboard_interrupt = True
            print(f"GDB exited.", file=sys.stderr)
        pids.clear()


if __name__ == "__main__":
    main()
